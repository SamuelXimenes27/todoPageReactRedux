{"ast":null,"code":"import { TodoActions } from \"../constants/TodoConstant\";\n\nconst todosReducer = (state = [], action) => {\n  switch (action.type) {\n    case TodoActions.ADD_ITEM:\n      //console.log(`test -> ${action.type} : ${action.payload}`);\n      return [...state, Object.assign({}, {\n        id: state.length + 1,\n        text: action.payload,\n        completed: false\n      })];\n\n    case TodoActions.EDIT_ITEM:\n      // console.log(`${action.type} : ${action.payload.id} : ${action.payload.text}`);\n      return state.map(todo => {\n        //console.log(`map: ${todo.id} = ${action.payload.id}`)\n        if (todo.id === action.payload.id) {\n          let todoTemp = {\n            id: action.payload.id,\n            text: action.payload.text,\n            completed: todo.completed\n          };\n          console.log(todoTemp);\n          return todoTemp;\n        } else {\n          return todo;\n        }\n      });\n\n    case TodoActions.REMOVE_ITEM:\n      //console.log(`${action.type} : ${action.payload}`);\n      return state.filter(todo => todo.id !== action.payload).map((todo, index) => ({\n        id: index + 1,\n        text: todo.text,\n        completed: todo.completed\n      }));\n\n    case TodoActions.TODO_COMPLETED:\n      //console.log(`${action.type} : ${action.payload}`);\n      return state.map(todo => {\n        if (todo.id === action.payload) {\n          return {\n            id: todo.id,\n            text: todo.text,\n            completed: !todo.completed\n          };\n        } else {\n          return todo;\n        }\n      });\n\n    case TodoActions.TOGGLE_TODO:\n      return state.map(todo => todo.id === action.id ? { ...todo,\n        completed: !todo.completed\n      } : todo);\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;","map":{"version":3,"sources":["/home/samuelximenes/Documentos/Trab.Eng.Software/react-redux-bootstrap-todo-application-master/src/reducers/todosReducer.js"],"names":["TodoActions","todosReducer","state","action","type","ADD_ITEM","Object","assign","id","length","text","payload","completed","EDIT_ITEM","map","todo","todoTemp","console","log","REMOVE_ITEM","filter","index","TODO_COMPLETED","TOGGLE_TODO"],"mappings":"AAAA,SAASA,WAAT,QAA4B,2BAA5B;;AAEA,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AACzC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKJ,WAAW,CAACK,QAAjB;AACI;AACA,aAAO,CACH,GAAGH,KADA,EAEHI,MAAM,CAACC,MAAP,CAAc,EAAd,EACI;AACIC,QAAAA,EAAE,EAAEN,KAAK,CAACO,MAAN,GAAe,CADvB;AAEIC,QAAAA,IAAI,EAAEP,MAAM,CAACQ,OAFjB;AAGIC,QAAAA,SAAS,EAAE;AAHf,OADJ,CAFG,CAAP;;AAWJ,SAAKZ,WAAW,CAACa,SAAjB;AACI;AACA,aAAOX,KAAK,CAACY,GAAN,CAAUC,IAAI,IAAI;AACrB;AACA,YAAIA,IAAI,CAACP,EAAL,KAAYL,MAAM,CAACQ,OAAP,CAAeH,EAA/B,EAAmC;AAC/B,cAAIQ,QAAQ,GAAG;AACXR,YAAAA,EAAE,EAAEL,MAAM,CAACQ,OAAP,CAAeH,EADR;AAEXE,YAAAA,IAAI,EAAEP,MAAM,CAACQ,OAAP,CAAeD,IAFV;AAGXE,YAAAA,SAAS,EAAEG,IAAI,CAACH;AAHL,WAAf;AAKAK,UAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,iBAAOA,QAAP;AACH,SARD,MAQO;AACH,iBAAOD,IAAP;AACH;AACJ,OAbM,CAAP;;AAgBJ,SAAKf,WAAW,CAACmB,WAAjB;AACI;AACA,aAAOjB,KAAK,CAACkB,MAAN,CAAaL,IAAI,IAAIA,IAAI,CAACP,EAAL,KAAYL,MAAM,CAACQ,OAAxC,EACFG,GADE,CAEC,CAACC,IAAD,EAAOM,KAAP,MACI;AACIb,QAAAA,EAAE,EAAEa,KAAK,GAAG,CADhB;AAEIX,QAAAA,IAAI,EAAEK,IAAI,CAACL,IAFf;AAGIE,QAAAA,SAAS,EAAEG,IAAI,CAACH;AAHpB,OADJ,CAFD,CAAP;;AAWJ,SAAKZ,WAAW,CAACsB,cAAjB;AACI;AACA,aAAOpB,KAAK,CAACY,GAAN,CAAUC,IAAI,IAAI;AACrB,YAAIA,IAAI,CAACP,EAAL,KAAYL,MAAM,CAACQ,OAAvB,EAAgC;AAC5B,iBAAO;AACHH,YAAAA,EAAE,EAAEO,IAAI,CAACP,EADN;AAEHE,YAAAA,IAAI,EAAEK,IAAI,CAACL,IAFR;AAGHE,YAAAA,SAAS,EAAE,CAACG,IAAI,CAACH;AAHd,WAAP;AAKH,SAND,MAMO;AACH,iBAAOG,IAAP;AACH;AACJ,OAVM,CAAP;;AAYJ,SAAKf,WAAW,CAACuB,WAAjB;AACI,aAAOrB,KAAK,CAACY,GAAN,CAAUC,IAAI,IAChBA,IAAI,CAACP,EAAL,KAAYL,MAAM,CAACK,EAApB,GACM,EAAE,GAAGO,IAAL;AAAWH,QAAAA,SAAS,EAAE,CAACG,IAAI,CAACH;AAA5B,OADN,GAEMG,IAHH,CAAP;;AAMJ;AACI,aAAOb,KAAP;AAnER;AAsEH,CAvED;;AAyEA,eAAeD,YAAf","sourcesContent":["import { TodoActions } from \"../constants/TodoConstant\";\n\nconst todosReducer = (state = [], action) => {\n    switch (action.type) {\n        case TodoActions.ADD_ITEM:\n            //console.log(`test -> ${action.type} : ${action.payload}`);\n            return [\n                ...state,\n                Object.assign({},\n                    {\n                        id: state.length + 1,\n                        text: action.payload,\n                        completed: false\n\n                    })\n            ];\n\n        case TodoActions.EDIT_ITEM:\n            // console.log(`${action.type} : ${action.payload.id} : ${action.payload.text}`);\n            return state.map(todo => {\n                //console.log(`map: ${todo.id} = ${action.payload.id}`)\n                if (todo.id === action.payload.id) {\n                    let todoTemp = {\n                        id: action.payload.id,\n                        text: action.payload.text,\n                        completed: todo.completed\n                    };\n                    console.log(todoTemp);\n                    return todoTemp\n                } else {\n                    return todo\n                }\n            });\n\n\n        case TodoActions.REMOVE_ITEM:\n            //console.log(`${action.type} : ${action.payload}`);\n            return state.filter(todo => todo.id !== action.payload)\n                .map(\n                    (todo, index) => (\n                        {\n                            id: index + 1,\n                            text: todo.text,\n                            completed: todo.completed\n                        }\n                    )\n                );\n\n        case TodoActions.TODO_COMPLETED:\n            //console.log(`${action.type} : ${action.payload}`);\n            return state.map(todo => {\n                if (todo.id === action.payload) {\n                    return {\n                        id: todo.id,\n                        text: todo.text,\n                        completed: !todo.completed\n                    }\n                } else {\n                    return todo\n                }\n            })\n\n        case TodoActions.TOGGLE_TODO:\n            return state.map(todo =>\n                (todo.id === action.id)\n                    ? { ...todo, completed: !todo.completed }\n                    : todo\n            )\n\n        default:\n            return state;\n    }\n\n}\n\nexport default todosReducer;"]},"metadata":{},"sourceType":"module"}